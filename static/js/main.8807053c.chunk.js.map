{"version":3,"sources":["utility/common.js","constants/common.js","components/AppProvider.jsx","components/Header/GameType.jsx","components/Header/Header.jsx","components/Content/Cell.jsx","components/Content/Board.jsx","components/Content/Content.jsx","components/Main.jsx","index.js"],"names":["getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","checkGameState","lines","i","a","b","c","position","iconType","isTie","getRandom","start","end","Math","floor","random","replace","index","value","slice","findRandomMove","emptyCells","minimax","depth","computerType","isMax","score","evaluate","best","lengthCells","nextCells","max","min","findBestMove","bestVal","bestMove","moveVal","THINKING_TIME","GAME_TYPES","ICON_CHARS","PLAYER_TURNS","initState","gameType","currentIcon","playerTurn","Array","fill","gameState","AppContext","React","createContext","AppProvider","state","changeType","type","initNewGame","humanPlay","newGame","initGame","timeout","clearTimeout","setTimeout","randomMove","computerPlay","setState","applyState","prevState","nextIcon","nextPlayerTurn","makeAIMove","this","Provider","props","children","Component","GameType","name","Consumer","context","onClick","className","contextType","Header","Cell","icon","isDoneClass","Board","boardRef","createRef","current","classList","add","remove","ref","Content","textInfo","currentIconType","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8807053c.chunk.js","sourcesContent":["export const getEmptyCells = (cells) => {\r\n  return cells\r\n    .map((val, idx) => [val, idx])\r\n    .filter(item => item[0] === null);\r\n}\r\n  \r\nexport const isMoveLeft = (cells) => {\r\n  const emptyCells = getEmptyCells(cells);\r\n  return emptyCells.length > 0;\r\n}\r\n  \r\nexport const checkGameState = (cells) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5], \r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  \r\n  let position = \"\";\r\n  \r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n      if (i >= 0 && i <= 2) position = `h h${i}`;\r\n      else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\r\n      else position = `d${i - 6}`;\r\n  \r\n      return {\r\n        position,\r\n        iconType: cells[a],\r\n        isTie: null\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    position: \"\",\r\n    iconType: null,\r\n    isTie: isMoveLeft(cells) ? null : true\r\n  };\r\n}\r\n  \r\nexport const getRandom = (start, end) => {\r\n  return start + Math.floor(Math.random() * (end - start));\r\n}\r\n  \r\nexport const replace = (cells, index, value) => {\r\n  return [...cells.slice(0, index), value, ...cells.slice(index + 1, cells.length)];\r\n}\r\n  \r\nexport const findRandomMove = (cells) => {\r\n  const emptyCells = getEmptyCells(cells);\r\n\r\n  if (emptyCells.length > 0) {\r\n    const randomNum = getRandom(0, emptyCells.length);\r\n    const index = emptyCells[randomNum][1];\r\n    return index;\r\n  }\r\n\r\n  return null;\r\n}\r\n  \r\n/**\r\n * Find best move based on Minimax algorithm\r\n */\r\nconst evaluate = (cells, computerType) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5], \r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  \r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n\r\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n      if (cells[a] === computerType) return 10;\r\n      return -10;\r\n    }\r\n  }\r\n  \r\n  return 0;\r\n}\r\n  \r\nconst minimax = (cells, depth, computerType, isMax) => {\r\n  const score = evaluate(cells, computerType);\r\n\r\n  // If Maximizer has won the game return his/her evaluated score \r\n  if (score === 10) return score - depth;\r\n\r\n  // If Minimizer has won the game return his/her evaluated score \r\n  if (score === -10) return score + depth;\r\n\r\n  // If there are no more moves and no winner then it is a tie \r\n  if (!isMoveLeft(cells)) return 0;\r\n\r\n  const lengthCells = cells.length;\r\n  let best;\r\n\r\n  // If this maximizer's move \r\n  if (isMax) {\r\n    best = -1000;\r\n\r\n    for (let i = 0; i < lengthCells; i++) {\r\n      const cell = cells[i];\r\n\r\n      if (cell === null) {\r\n        // Make a move\r\n        const nextCells = replace(cells, i, computerType);\r\n\r\n        // Call minimax recursively and choose the maximum value\r\n        best = Math.max(best, minimax(nextCells, depth + 1, computerType, !isMax));\r\n      }\r\n    }\r\n  } else {\r\n    best = 1000;\r\n\r\n    for (let i = 0; i < lengthCells; i++) {\r\n      const cell = cells[i];\r\n\r\n      if (cell === null) {\r\n        // Make a move\r\n        const nextCells = replace(cells, i, 1 - computerType);\r\n\r\n        // Call minimax recursively and choose the minimum value\r\n        best = Math.min(best, minimax(nextCells, depth + 1, computerType, !isMax));\r\n      }\r\n    }\r\n  }\r\n  return best;\r\n}\r\n  \r\nexport const findBestMove = (cells, computerType) => {\r\n  let bestVal = -1000;\r\n  let bestMove = null;\r\n\r\n  const lengthCells = cells.length;\r\n\r\n  for (let i = 0; i < lengthCells; i++) {\r\n    const cell = cells[i];\r\n\r\n    if (cell === null) {\r\n      // Make a move\r\n      const nextCells = replace(cells, i, computerType);\r\n\r\n      // Compute evaluation function for this move. \r\n      const moveVal = minimax(nextCells, 0, computerType, false);\r\n\r\n      // If the value of the current move is more than the best value, then update best\r\n      if (moveVal > bestVal) {\r\n        bestVal = moveVal;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n  return bestMove;\r\n}","import { getRandom } from '../utility/common';\r\n\r\nexport const THINKING_TIME = 500;\r\n\r\nexport const ICON_PLACE_HOLDDER = 'I';\r\n\r\nexport const GAME_TYPES = {\r\n    TWO_PLAYERS: 0,\r\n    VERSUS_COMPUTER: 1\r\n}\r\n\r\nexport const ICON_TYPES = {\r\n    O: 0,\r\n    X: 1\r\n}\r\n  \r\nexport const ICON_CHARS = ['O', 'X'];\r\n  \r\nexport const PLAYER_TURNS = {\r\n    HUMAN: 0,\r\n    COMPUTER: 1\r\n}\r\n\r\nexport const initState = {\r\n    gameType: GAME_TYPES.TWO_PLAYERS,\r\n    currentIcon: getRandom(0, 2),\r\n    playerTurn: getRandom(0, 2),\r\n    cells: new Array(9).fill(null),\r\n    gameState: {\r\n      position: \"\",\r\n      iconType: null,\r\n      isTie: null,\r\n    },\r\n}\r\n","import React from 'react';\r\nimport { checkGameState, getRandom, replace, findBestMove, findRandomMove } from '../utility/common';\r\nimport { THINKING_TIME, initState, PLAYER_TURNS, GAME_TYPES } from '../constants/common';\r\n\r\nexport const AppContext = React.createContext();\r\n\r\nexport default class AppProvider extends React.Component {\r\n  state = {\r\n    gameType: initState.gameType,\r\n    currentIcon: initState.currentIcon,\r\n    playerTurn: initState.playerTurn,\r\n    cells: initState.cells,\r\n    gameState: initState.gameState,\r\n\r\n    changeType: (type) => {\r\n      if (this.state.gameType !== type) {\r\n        this.initNewGame(type);\r\n      }\r\n    },\r\n    humanPlay: (index) => {\r\n      this.humanPlay(index)\r\n    },\r\n    newGame: () => {\r\n      this.initNewGame(this.state.gameType);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGame();\r\n  }\r\n  \r\n  initGame = () => {\r\n    if (this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\r\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\r\n\r\n      if (this.timeout) {\r\n        clearTimeout(this.timeout);\r\n      }\r\n\r\n      this.timeout = setTimeout(() => {\r\n        const randomMove = findRandomMove(this.state.cells);\r\n        this.computerPlay(randomMove);\r\n      }, THINKING_TIME);\r\n    }\r\n  }\r\n\r\n  initNewGame = (type = initState.gameType) => {\r\n    this.setState(() => {\r\n      return {\r\n        gameType: type,\r\n        currentIcon: getRandom(0, 2),\r\n        playerTurn: getRandom(0, 2),\r\n        cells: initState.cells,\r\n        gameState: initState.gameState,\r\n      }\r\n    }, () => {\r\n      this.initGame();\r\n    });\r\n  }\r\n\r\n  applyState = (prevState, index) => {\r\n    const cells = prevState.cells;\r\n    const nextIcon = 1 - prevState.currentIcon;\r\n    const nextPlayerTurn = 1 - prevState.playerTurn;\r\n    const nextCells = replace(cells, index, prevState.currentIcon);\r\n    const gameState = checkGameState(nextCells);\r\n\r\n    return {\r\n      gameState: gameState,\r\n      currentIcon: nextIcon,\r\n      playerTurn: nextPlayerTurn,\r\n      cells: nextCells\r\n    }\r\n  }\r\n\r\n  humanPlay = (index) => {\r\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\r\n      (this.state.gameType === GAME_TYPES.TWO_PLAYERS || this.state.playerTurn === PLAYER_TURNS.HUMAN)) {\r\n\r\n      this.setState(prevState => {\r\n        return this.applyState(prevState, index);\r\n      }, () => {\r\n        // Make a move for computer if the game is in 'versus computer' mode\r\n        if (this.state.gameState.position === \"\" &&\r\n          this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\r\n          this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\r\n\r\n          setTimeout(() => {\r\n            this.makeAIMove();\r\n          }, THINKING_TIME);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  computerPlay = (index) => {\r\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\r\n      this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\r\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\r\n\r\n      this.setState(prevState => this.applyState(prevState, index));\r\n    }\r\n  }\r\n\r\n  makeAIMove = () => {\r\n    const bestMove = findBestMove(this.state.cells, this.state.currentIcon);\r\n\r\n    if (bestMove !== null) {\r\n      this.computerPlay(bestMove);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { AppContext } from '../AppProvider';\r\n\r\nconst GameType = ({ value, name }) => (\r\n    <AppContext.Consumer>\r\n        {context => (\r\n            <li \r\n                onClick={() => context.changeType(value)} \r\n                className={value === context.gameType ? \"active\" : \"\"}> \r\n                {name} \r\n            </li>\r\n        )}\r\n    </AppContext.Consumer>\r\n);\r\n\r\nGameType.contextType = AppContext;\r\n\r\nexport default GameType;  ","import React, { Component } from 'react';\r\nimport { AppContext } from '../AppProvider';\r\nimport { GAME_TYPES } from '../../constants/common';\r\nimport GameType from './GameType';\r\nimport './Header.scss';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>Tic Tac Toe</h1>\r\n        <ul>\r\n          <GameType value={GAME_TYPES.TWO_PLAYERS} name=\"2 Players\" />\r\n          <GameType value={GAME_TYPES.VERSUS_COMPUTER} name=\"Versus Computer\" />\r\n        </ul>\r\n        <div>\r\n          <button onClick={() => this.context.newGame()}>New Game</button>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.contextType = AppContext;\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { AppContext } from '../AppProvider';\r\nimport { ICON_CHARS, ICON_PLACE_HOLDDER } from '../../constants/common';\r\n\r\nconst Cell = ({ index }) => (\r\n    <AppContext.Consumer>\r\n        {context => {\r\n            const value = context.cells[index];\r\n            const icon = value !== null ? ICON_CHARS[value] : ICON_PLACE_HOLDDER;\r\n            const isDoneClass = icon !== ICON_PLACE_HOLDDER ? 'done' : '';\r\n\r\n            return (\r\n                <button\r\n                    className={`cell cell-${index} ${isDoneClass}`}\r\n                    onClick={() => context.humanPlay(index)}>\r\n                    {icon}\r\n                </button>\r\n            );\r\n        }}\r\n    </AppContext.Consumer>\r\n);\r\n\r\nexport default Cell;  ","import React, { Component } from 'react';\r\nimport { AppContext } from '../AppProvider';\r\nimport Cell from './Cell';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.boardRef = React.createRef();\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    if (this.context.gameState.position !== \"\") {\r\n      setTimeout(() => {\r\n        this.boardRef.current.classList.add('full');\r\n      }, 50);\r\n    } else {\r\n      this.boardRef.current.classList.remove('full');\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className={`board ${this.context.gameState.position}`} ref={this.boardRef}>\r\n        <div className=\"board-row\">\r\n          <Cell index={0} />\r\n          <Cell index={1} />\r\n          <Cell index={2} />\r\n        </div>\r\n\r\n        <div className=\"board-row\">\r\n          <Cell index={3} />\r\n          <Cell index={4} />\r\n          <Cell index={5} />\r\n        </div>\r\n\r\n        <div className=\"board-row\">\r\n          <Cell index={6} />\r\n          <Cell index={7} />\r\n          <Cell index={8} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nBoard.contextType = AppContext;\r\n\r\nexport default Board;  ","import React, { Component } from 'react';\r\nimport { AppContext } from '../AppProvider';\r\nimport { GAME_TYPES, PLAYER_TURNS, ICON_CHARS } from '../../constants/common';\r\nimport Board from './Board';\r\nimport './Content.scss';\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    let textInfo = '';\r\n    const currentIconType = this.context.currentIcon;\r\n\r\n    if (this.context.gameState.isTie) {\r\n      textInfo = 'Tie!';\r\n    } else {\r\n      if (this.context.gameType === GAME_TYPES.TWO_PLAYERS) {\r\n        if (this.context.gameState.position === \"\") {\r\n          textInfo = `It's player(${ICON_CHARS[currentIconType]}) turn`;\r\n        } else {\r\n          textInfo = `Player(${ICON_CHARS[1 - currentIconType]}) wins!`;\r\n        }\r\n      } else {\r\n        if (this.context.gameState.position === \"\") {\r\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `It's your turn`;\r\n          else textInfo = `It's computer turn`;\r\n        } else {\r\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `Computer win!`;\r\n          else textInfo = `You win!`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <main className=\"main\">\r\n        <div className=\"info\">{textInfo}</div>\r\n        <Board />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nContent.contextType = AppContext;\r\n\r\nexport default Content;\r\n","import React from 'react';\nimport AppProvider from './AppProvider';\nimport Header from './Header/Header';\nimport Content from './Content/Content';\nimport './Main.scss';\n\nconst App = () => (\n  <AppProvider>\n    <div className=\"app\">\n      <Header />\n      <Content />\n    </div>\n  </AppProvider>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}